"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2EmbedRequest = void 0;
const core = __importStar(require("../../../../../core"));
const EmbedInputType_1 = require("../../../../types/EmbedInputType");
const EmbedInput_1 = require("../../../../types/EmbedInput");
const EmbeddingType_1 = require("../../../../types/EmbeddingType");
const V2EmbedRequestTruncate_1 = require("../../types/V2EmbedRequestTruncate");
exports.V2EmbedRequest = core.serialization.object({
    texts: core.serialization.list(core.serialization.string()).optional(),
    images: core.serialization.list(core.serialization.string()).optional(),
    model: core.serialization.string(),
    inputType: core.serialization.property("input_type", EmbedInputType_1.EmbedInputType),
    inputs: core.serialization.list(EmbedInput_1.EmbedInput).optional(),
    maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
    outputDimension: core.serialization.property("output_dimension", core.serialization.number().optional()),
    embeddingTypes: core.serialization.property("embedding_types", core.serialization.list(EmbeddingType_1.EmbeddingType)),
    truncate: V2EmbedRequestTruncate_1.V2EmbedRequestTruncate.optional(),
});
