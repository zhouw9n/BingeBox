"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
// noinspection DuplicatedCode
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingDefaultOutputs = exports.LoggingDefaults = exports.EmptyInternalLoggingConfig = exports.EventConstructors = exports.PrintLoggingOutputs = exports.LoggingOutputs = exports.LoggingEventsWithAll = exports.LoggingEvents = void 0;
const events_js_1 = require("../../documents/events.js");
const events_js_2 = require("../../administration/events.js");
const util_js_1 = require("../../lib/logging/util.js");
const utils_js_1 = require("../../lib/utils.js");
exports.LoggingEvents = ['adminCommandStarted', 'adminCommandPolling', 'adminCommandSucceeded', 'adminCommandFailed', 'adminCommandWarnings', 'commandStarted', 'commandFailed', 'commandSucceeded', 'commandWarnings'];
void utils_js_1.EqualityProof;
exports.LoggingEventsWithAll = ['all', ...exports.LoggingEvents];
void utils_js_1.EqualityProof;
exports.LoggingOutputs = ['event', 'stdout', 'stderr', 'stdout:verbose', 'stderr:verbose'];
void utils_js_1.EqualityProof;
exports.PrintLoggingOutputs = exports.LoggingOutputs.filter((o) => o !== 'event');
void utils_js_1.EqualityProof;
exports.EventConstructors = {
    commandFailed: events_js_1.CommandFailedEvent,
    commandStarted: events_js_1.CommandStartedEvent,
    commandWarnings: events_js_1.CommandWarningsEvent,
    commandSucceeded: events_js_1.CommandSucceededEvent,
    adminCommandFailed: events_js_2.AdminCommandFailedEvent,
    adminCommandStarted: events_js_2.AdminCommandStartedEvent,
    adminCommandPolling: events_js_2.AdminCommandPollingEvent,
    adminCommandWarnings: events_js_2.AdminCommandWarningsEvent,
    adminCommandSucceeded: events_js_2.AdminCommandSucceededEvent,
};
exports.EmptyInternalLoggingConfig = Object.fromEntries(exports.LoggingEvents.map((e) => [e, (0, util_js_1.buildOutputsMap)([])]));
exports.LoggingDefaults = [{
        events: exports.LoggingEvents.filter((e) => e !== 'commandStarted' && e !== 'commandSucceeded'),
        emits: ['event', 'stderr'],
    }, {
        events: ['commandStarted', 'commandSucceeded'],
        emits: ['event'],
    }];
exports.LoggingDefaultOutputs = {
    adminCommandStarted: ['event', 'stdout'],
    adminCommandPolling: ['event', 'stdout'],
    adminCommandSucceeded: ['event', 'stdout'],
    adminCommandFailed: ['event', 'stderr'],
    adminCommandWarnings: ['event', 'stderr'],
    commandStarted: ['event'],
    commandFailed: ['event', 'stderr'],
    commandSucceeded: ['event'],
    commandWarnings: ['event', 'stderr'],
};
