// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
// noinspection DuplicatedCode
import { CommandFailedEvent, CommandStartedEvent, CommandSucceededEvent, CommandWarningsEvent, } from '../../documents/events.js';
import { AdminCommandFailedEvent, AdminCommandPollingEvent, AdminCommandStartedEvent, AdminCommandSucceededEvent, AdminCommandWarningsEvent, } from '../../administration/events.js';
import { buildOutputsMap } from '../../lib/logging/util.js';
import { EqualityProof } from '../../lib/utils.js';
export const LoggingEvents = ['adminCommandStarted', 'adminCommandPolling', 'adminCommandSucceeded', 'adminCommandFailed', 'adminCommandWarnings', 'commandStarted', 'commandFailed', 'commandSucceeded', 'commandWarnings'];
void EqualityProof;
export const LoggingEventsWithAll = ['all', ...LoggingEvents];
void EqualityProof;
export const LoggingOutputs = ['event', 'stdout', 'stderr', 'stdout:verbose', 'stderr:verbose'];
void EqualityProof;
export const PrintLoggingOutputs = LoggingOutputs.filter((o) => o !== 'event');
void EqualityProof;
export const EventConstructors = {
    commandFailed: CommandFailedEvent,
    commandStarted: CommandStartedEvent,
    commandWarnings: CommandWarningsEvent,
    commandSucceeded: CommandSucceededEvent,
    adminCommandFailed: AdminCommandFailedEvent,
    adminCommandStarted: AdminCommandStartedEvent,
    adminCommandPolling: AdminCommandPollingEvent,
    adminCommandWarnings: AdminCommandWarningsEvent,
    adminCommandSucceeded: AdminCommandSucceededEvent,
};
export const EmptyInternalLoggingConfig = Object.fromEntries(LoggingEvents.map((e) => [e, buildOutputsMap([])]));
export const LoggingDefaults = [{
        events: LoggingEvents.filter((e) => e !== 'commandStarted' && e !== 'commandSucceeded'),
        emits: ['event', 'stderr'],
    }, {
        events: ['commandStarted', 'commandSucceeded'],
        emits: ['event'],
    }];
export const LoggingDefaultOutputs = {
    adminCommandStarted: ['event', 'stdout'],
    adminCommandPolling: ['event', 'stdout'],
    adminCommandSucceeded: ['event', 'stdout'],
    adminCommandFailed: ['event', 'stderr'],
    adminCommandWarnings: ['event', 'stderr'],
    commandStarted: ['event'],
    commandFailed: ['event', 'stderr'],
    commandSucceeded: ['event'],
    commandWarnings: ['event', 'stderr'],
};
